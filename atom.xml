<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anntly</title>
  
  <subtitle>do better yourself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://anntly.github.io/"/>
  <updated>2018-07-20T11:05:51.256Z</updated>
  <id>https://anntly.github.io/</id>
  
  <author>
    <name>Anntly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于java的数据结构复习--队列</title>
    <link href="https://anntly.github.io/2018/07/20/%E5%9F%BA%E4%BA%8Ejava%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0-%E9%98%9F%E5%88%97/"/>
    <id>https://anntly.github.io/2018/07/20/基于java的数据结构复习-队列/</id>
    <published>2018-07-20T10:43:59.000Z</published>
    <updated>2018-07-20T11:05:51.256Z</updated>
    
    <content type="html"><![CDATA[<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><ul><li>队列也是一种线性结构</li><li>队列对应的操作时数组的子集</li><li>只能从一端(队尾)添加元素,只能从另一端(队首)取出元素</li><li>队列是一种先进先出的数据结构</li><li>First In First Out(FIFO)</li></ul><h4 id="数组队列"><a href="#数组队列" class="headerlink" title="数组队列"></a>数组队列</h4><ul><li>代码实现</li></ul><ol><li>Queue接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入队一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除队首元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">dequeue</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取队首元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">getFront</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>ArrayQueue实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Array&lt;E&gt; array;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        array = <span class="keyword">new</span> Array&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        array = <span class="keyword">new</span> Array&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.getCapacity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        array.addLast(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.removeFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.getFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder res =  <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(<span class="string">"Queue: "</span>);</span><br><span class="line">        res.append(<span class="string">"Front ["</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array.getSize();i++)&#123;</span><br><span class="line">            res.append(array.get(i));</span><br><span class="line">            <span class="keyword">if</span>(i!=array.getSize()-<span class="number">1</span>)&#123;</span><br><span class="line">                res.append(<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(<span class="string">"] tail"</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayQueue&lt;Integer&gt; queue = <span class="keyword">new</span> ArrayQueue&lt;Integer&gt;(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            queue.enqueue(i);</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">3</span> == <span class="number">2</span>)&#123;</span><br><span class="line">                queue.dequeue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(queue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="数组队列的复杂度分析"><a href="#数组队列的复杂度分析" class="headerlink" title="数组队列的复杂度分析"></a>数组队列的复杂度分析</h4><ol><li>void enqueue() O(1) 均摊</li><li>E dequeue() O(n)</li><li>E front() O(1)</li><li>int getSize() O(1)</li><li>boolean isEmpty() O(1)</li></ol><h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4><ul><li>普通队列在执行队首删除操作的时候，因为要挪动数组中其他元素，复杂度为O(n)</li><li>为了解决这个问题，使用两个指针指向队首与队尾，分别为front与tail</li><li>当front == tail的时候代表着循环列表为空</li><li>当有元素加入队列的时候，tail右移一位,tail=(tail+1)%data.length;</li><li>当有元素从队首取出时，front右移一位，front=(front+1)%data.length;</li><li>当tail移动到边界的时候，如果队首有过出队操作的话，因为是用的是取余(tail=(tail+1)%data.length),tail可以移动到front的左侧位置，保证空间不浪费</li><li>当(tail + 1)%c == front 的时候循环队列为满</li><li>因此，循环队列会浪费一个空间</li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoopQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> E[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front,tail;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoopQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        data = (E[]) <span class="keyword">new</span> Object[capacity + <span class="number">1</span>];  <span class="comment">//因为循环队列会浪费一个空间</span></span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        tail = <span class="number">0</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoopQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.length - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front == tail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((tail + <span class="number">1</span>)%data.length == front)&#123;</span><br><span class="line">            resize(getCapacity() * <span class="number">2</span>);   <span class="comment">//当队列满了的时候,进行扩容</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        data[tail] = e;</span><br><span class="line">        tail = (tail + <span class="number">1</span>) % data.length;</span><br><span class="line">        size ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">        E [] newData = (E[]) <span class="keyword">new</span> Object[newCapacity +<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            newData[i] = data[(i + front) % data.length];</span><br><span class="line">        &#125;</span><br><span class="line">        data = newData;</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        tail = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"队列为空，不能删除"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        E ret = data[front];</span><br><span class="line">        data[front] = <span class="keyword">null</span>;</span><br><span class="line">        front = (front + <span class="number">1</span>)%data.length;</span><br><span class="line">        size --;</span><br><span class="line">        <span class="keyword">if</span>(size == getCapacity()/<span class="number">4</span> &amp;&amp; getCapacity() / <span class="number">2</span>!= <span class="number">0</span>)&#123;</span><br><span class="line">            resize(getCapacity()/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"队列为空，不能取出"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(<span class="string">"LoopQueue : size = %d , capacity = %d\n"</span>,size,getCapacity());</span><br><span class="line">        res.append(<span class="string">"front ["</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = front;i != tail;i = (i+<span class="number">1</span>)%data.length)&#123;</span><br><span class="line">            res.append(data[i]);</span><br><span class="line">            <span class="keyword">if</span>((i+<span class="number">1</span>)%data.length != tail)&#123;</span><br><span class="line">                res.append(<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(<span class="string">"] tail"</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        LoopQueue&lt;Integer&gt; queue = <span class="keyword">new</span> LoopQueue&lt;Integer&gt;(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            queue.enqueue(i);</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">3</span> == <span class="number">2</span>)&#123;</span><br><span class="line">                queue.dequeue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(queue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>循环队列的复杂度<ul><li>void enqueue(E) O(1) 均摊</li><li>E dequeue() O(1) 均摊</li><li>E getFront() O(1)</li><li>int getSize() O(1)</li><li>boolean isEmpty() O(1)</li></ul></li></ul><h3 id="两种方式的差异"><a href="#两种方式的差异" class="headerlink" title="两种方式的差异"></a>两种方式的差异</h3><ul><li>当dequeue()使用频率很高的时候，普通队列耗时会更加的多</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;队列也是一种线性结构&lt;/li&gt;
&lt;li&gt;队列对应的操作时数组的子集&lt;/li&gt;
&lt;li&gt;只能从一端(队尾)添加元素,只能从另一端(
      
    
    </summary>
    
    
      <category term="Java" scheme="https://anntly.github.io/tags/Java/"/>
    
      <category term="数据结构" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>基于java的数据结构复习--栈</title>
    <link href="https://anntly.github.io/2018/07/20/%E5%9F%BA%E4%BA%8Ejava%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0-%E6%A0%88/"/>
    <id>https://anntly.github.io/2018/07/20/基于java的数据结构复习-栈/</id>
    <published>2018-07-20T10:40:22.000Z</published>
    <updated>2018-07-20T11:02:49.293Z</updated>
    
    <content type="html"><![CDATA[<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ul><li>栈是一种线性结构</li><li>相比数组，栈对应的操作时数组的子集</li><li>栈只能从一端添加元素，也只能从一端取出元素</li><li>这一端称为栈顶</li><li>栈是一种后进先出的数据结构（Last In First Out (LIFO)）<h4 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h4></li></ul><ol><li>编辑器的Uodo操作(撤销)</li><li>程序调用的系统栈</li></ol><h4 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h4><ul><li>代码实现</li></ul><ol><li><p>先创建一个Stack接口，包含需要用的方法，为以后链表实现做准备</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取元素个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入栈一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出栈一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看栈顶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">peek</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用数组方式实现Stack</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    Array&lt;E&gt; array;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        array = <span class="keyword">new</span> Array&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        array = <span class="keyword">new</span> Array&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.getCapacity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        array.addLast(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看栈顶元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.getLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(<span class="string">"Stack:"</span>);</span><br><span class="line">        res.append(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;array.getSize();i++)&#123;</span><br><span class="line">            res.append(array.get(i));</span><br><span class="line">            <span class="keyword">if</span>(i!=array.getSize()-<span class="number">1</span>)&#123;</span><br><span class="line">                res.append(<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(<span class="string">"] top"</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>时间复杂度分析<ul><li>ArrayStack<e></e></li><li>void push(E) O(1)均摊</li><li>E pop() O(1)均摊</li><li>E peek() O(1)</li><li>int getSize() O(1)</li><li>boolean isEmpty() O(1)</li></ul></li></ul><h4 id="栈的应用-括号匹配"><a href="#栈的应用-括号匹配" class="headerlink" title="栈的应用-括号匹配"></a>栈的应用-括号匹配</h4><ul><li><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><ul><li><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol></li><li><p>注意空字符串可被认为是有效字符串。</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'('</span> || c == <span class="string">'['</span> || c == <span class="string">'&#123;'</span>)&#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;<span class="keyword">else</span>  &#123;</span><br><span class="line">                <span class="keyword">if</span>(stack.isEmpty())&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">char</span> top = stack.pop();</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">')'</span> &amp;&amp; top != <span class="string">'('</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">']'</span> &amp;&amp; top != <span class="string">'['</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">'&#125;'</span> &amp;&amp; top != <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;栈是一种线性结构&lt;/li&gt;
&lt;li&gt;相比数组，栈对应的操作时数组的子集&lt;/li&gt;
&lt;li&gt;栈只能从一端添加元素，也只能从一端取出元素&lt;/
      
    
    </summary>
    
    
      <category term="Java" scheme="https://anntly.github.io/tags/Java/"/>
    
      <category term="数据结构" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>基于java的数据结构复习--数组</title>
    <link href="https://anntly.github.io/2018/07/20/%E5%9F%BA%E4%BA%8Ejava%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0-%E6%95%B0%E7%BB%84/"/>
    <id>https://anntly.github.io/2018/07/20/基于java的数据结构复习-数组/</id>
    <published>2018-07-20T10:34:24.000Z</published>
    <updated>2018-07-20T11:04:44.103Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数组基础"><a href="#数组基础" class="headerlink" title="数组基础"></a>数组基础</h3><ul><li>数组最大的优点：快速查询</li><li>数组最好应用于“索引有语意”的情况</li><li>索引过大也不适合使用数组</li><li>无序数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> E[] data;  <span class="comment">//先限制类型只能为int</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;    <span class="comment">//有效的元素的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> capacity:容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        data = (E[]) <span class="keyword">new</span> Object[capacity];  <span class="comment">//java中不能直接new E();</span></span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参构造函数，默认容量为10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取香油元素个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e：添加的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line"><span class="comment">//        if (size == data.length)&#123;</span></span><br><span class="line"><span class="comment">//            throw new IllegalArgumentException("添加失败,数组已经满了");</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        data[size] = e;</span></span><br><span class="line"><span class="comment">//        size++;</span></span><br><span class="line">        add(size,e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加到第一个位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        add(<span class="number">0</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定位置插入元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; size)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"添加失败,元素位置不合法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(size == data.length)&#123;</span><br><span class="line">            resize(<span class="number">2</span>*data.length);   <span class="comment">//扩大数组容量</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = size-<span class="number">1</span>;i &gt;= index;i --)&#123;</span><br><span class="line">            data[i + <span class="number">1</span>] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        data[index] = e;</span><br><span class="line">        size ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加数组容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newCapacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        E[] newData = (E[]) <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            newData[i] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        data = newData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;size)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"下标不合法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(size-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改指定小标的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;size)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"下标不合法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        data[index] = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找数组是否包含元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i].equals(e))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找数组元素所在的索引，不存在就返回-1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i].equals(e))&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数组中删除index位置的元素，并返回删除的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        E e = data[index];</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span>||index&gt;=size)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"下标不合法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index+<span class="number">1</span>;i&lt;size;i++)&#123;</span><br><span class="line">            data[i-<span class="number">1</span>] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line"> <span class="comment">//       data[size] = null; //不是必须,而且类型不确定</span></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">if</span>(size == data.length/<span class="number">4</span>&amp;&amp;data.length/<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">            resize(data.length/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除第一位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除最后一位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(size-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeElement</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = find(e);</span><br><span class="line">        <span class="keyword">if</span>(index!=-<span class="number">1</span>)&#123;</span><br><span class="line">            remove(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(String.format(<span class="string">"com.Array.Array:size = %d , capacity = %d\n"</span>,size,getCapacity()));</span><br><span class="line">        res.append(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; size;i++)&#123;</span><br><span class="line">            res.append(data[i]);</span><br><span class="line">            <span class="keyword">if</span>(i!=size-<span class="number">1</span>)&#123;</span><br><span class="line">                res.append(<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(<span class="string">']'</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有序数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size; <span class="comment">//有效元素个数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderArray</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = <span class="keyword">new</span> <span class="keyword">int</span>[capacity];</span><br><span class="line">        <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderArray</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加一个新元素，默认为升序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(size == data.length)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"数组已经满了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i]&gt;e)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = size-<span class="number">1</span>;j&gt;=i;j--)&#123;</span><br><span class="line">            data[j+<span class="number">1</span>] = data[j];</span><br><span class="line">        &#125;</span><br><span class="line">        data[i] = e;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询元素(线性查询)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i] == e)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二分法查找</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">finx</span><span class="params">(<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lower=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> upper=size-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid=(lower+size)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(lower&lt;=upper)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data[mid] == e)&#123;</span><br><span class="line">               <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(data[mid]&lt;e)&#123;</span><br><span class="line">                lower = mid;</span><br><span class="line">                mid = (upper+lower)/<span class="number">2</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                upper = mid;</span><br><span class="line">                mid = (upper+lower)/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = finx(e);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index;i&lt;=size;i++)&#123;</span><br><span class="line">            data[i]=data[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        data[size]=<span class="number">0</span>;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(String.format(<span class="string">"com.Array.Array:size = %d , capacity = %d\n"</span>,size,data.length));</span><br><span class="line">        res.append(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; size;i++)&#123;</span><br><span class="line">            res.append(data[i]);</span><br><span class="line">            <span class="keyword">if</span>(i!=size-<span class="number">1</span>)&#123;</span><br><span class="line">                res.append(<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(<span class="string">']'</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度<ul><li>线性查找：O(N)</li><li>二分查找:O(logN)  (当数组很大时，二分查找优于线性查找)</li><li>有序数组插入的复杂度为：O(N)</li><li>无序数组插入时间复杂度为O(1)</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数组基础&quot;&gt;&lt;a href=&quot;#数组基础&quot; class=&quot;headerlink&quot; title=&quot;数组基础&quot;&gt;&lt;/a&gt;数组基础&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数组最大的优点：快速查询&lt;/li&gt;
&lt;li&gt;数组最好应用于“索引有语意”的情况&lt;/li&gt;
&lt;li&gt;索引过大也不适
      
    
    </summary>
    
    
      <category term="Java" scheme="https://anntly.github.io/tags/Java/"/>
    
      <category term="数据结构" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>基于Mysql的数据库复习笔记--触发器</title>
    <link href="https://anntly.github.io/2018/07/19/%E5%9F%BA%E4%BA%8EMysql%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
    <id>https://anntly.github.io/2018/07/19/基于Mysql的数据库复习笔记-触发器/</id>
    <published>2018-07-18T16:42:39.000Z</published>
    <updated>2018-07-18T16:42:55.233Z</updated>
    
    <content type="html"><![CDATA[<h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><ul><li>基本概念<ul><li>触发器是一种特殊的存储过程，它不同于之前的存储过程。触发器主要是通过事件进行触发而被执行的，而存储过程可以通过存储过程名字而被直接调用</li></ul></li><li>作用<ol><li>可以在写入数据表之前，强制检验或者转换数据(保证安全)</li><li>触发器发生错误的时候，异动的结果会被撤销(如果触发器执行错误，前面用户已经执行成功的操作也会被撤销:类似事务安全)</li><li>部分数据库管理系统可以针对数据定义语言(DDL)使用触发器，称为DDL触发器</li><li>可依照特定的情况，替换异动的指令(INSTRAD OF)（mysql不支持）</li></ol></li><li>优点</li></ul><ol><li>触发器可通过数据库中的相关表实现级联操作(如果某张表的数据改变,可以利用触发器来实现其他表的无痕操作[用户不知道])</li><li>保证数据安全:进行安全校验</li></ol><ul><li>缺点</li></ul><ol><li>对触发器过分依赖，势必影响数据库的结构，同时增加了维护的复杂度</li><li>造成数据在程序层面不可控</li></ol><h3 id="触发器基本语法"><a href="#触发器基本语法" class="headerlink" title="触发器基本语法"></a>触发器基本语法</h3><ul><li><p>基本语法:</p><ul><li>create trigger 触发器名字 触发时机 触发事件 on 表 for each row<br>Begin<br>End<br>触发对象:on 表 for each row,触发器绑定实质是表中所有行，因此当每一行发生指定的改变的时候，就会触发触发器</li></ul></li><li><p>触发时机</p><ul><li>每张表中对应的行都会有不同的状态，当SQL指令发生的时候，都会令行中数据发生改变，每一行总会有两种状态:数据操作前和操作后</li><li>Before:在表中数据发生改变前的状态</li><li>After:在表中数据已经发生改变后的状态</li></ul></li><li><p>触发事件</p><ul><li>mysql中触发器针对的目标是数据发生改变，对应的操作只有写操作(增删改)</li><li>insert:插入操作</li><li>update:更新操作</li><li>delete:删除操作</li></ul></li><li><p>注意事项</p><ul><li>一张表中，每一个触发时机绑定的触发事件对应的触发器类型只能有一个，一张表中只能有一个对应after insert 触发器</li><li>因此，一张表中触发器最多有6个</li></ul></li><li><p>需求:一张商品表，一张订单表(保留商品ID)，每次订单生成，商品表中对应的库存就应该发生变化</p></li></ul><ol><li>创建两张表:商品表，订单表</li><li>创建触发器:如果订单表发生数据插入，对应商品就应该减少库存<ul><li>create trigger 名字 after insert on my_orders for each row</li></ul></li></ol><ul><li>查看触发器</li></ul><ol><li>查看全部触发器:show triggers;</li><li>查看触发器创建语句:show create  trigger 触发器名字;</li></ol><ul><li><p>触发触发器</p><ul><li>让触发器指定的表中，对应的时机发生对应的操作即可</li></ul><ol><li>表为my_orders</li><li>在插入之后</li><li>插入操作</li></ol></li><li><p>删除触发器</p></li><li><p>基本语法:drop trigger 触发器名字;</p></li><li><p>对应代码</p></li></ul><pre>-- 创建两张表create table my_goods(id int primary key auto_increment,name varchar(20) not null,inv int)charset utf8;create table my_orders(id int primary key auto_increment,goods_id int not null,goods_num int not null)charset utf8;insert into my_goods values(null,'手机',1000),(null,'电脑',5000),(null,'游戏机',4000);-- 创建触发器delimiter $$create trigger after_insert_order_t after insert on my_orders for each rowbegin    -- 更新商品库存    update my_goods set inv = inv - 1 where id = 1;end$$delimiter ;-- 插入数据insert into my_orders values(null,1,1);-- 查询my_orders表select * from my_orders;</pre><h4 id="触发器应用"><a href="#触发器应用" class="headerlink" title="触发器应用"></a>触发器应用</h4><ul><li>记录关键字:new ,old<ul><li>触发器针对的是数据表中的每条记录(每行)，每行在数据操作前后都有一个对应的状态，触发器在执行之前就将状态获取到了，将没有操作之前的状态(数据)都保存到old关键字中，而操作后的状态都放到new中</li><li>在触发器中，可以通old和new来获取绑定表中对应的记录数据</li><li>基本语法:关键字.字段名</li><li>old和new并不是所有触发器都有</li><li>insert:插入前全为空，没有old</li><li>delete:删除之后清空数据，没有new</li></ul></li></ul><h4 id="商品自动扣除库存"><a href="#商品自动扣除库存" class="headerlink" title="商品自动扣除库存"></a>商品自动扣除库存</h4><pre>-- 删除触发器drop trigger after_insert_order_t;--自动扣除商品库存的触发器delimiter $$create trigger a_i_i_t after insert on my_orders for each rowbegin    -- 更新商品库存:new 代表新增的订单    update my_goods set inv = inv - new.goods_num where id = new.goods_id;end$$delimiter ;</pre><h3 id="如果库存数量没有商品订单多怎么办"><a href="#如果库存数量没有商品订单多怎么办" class="headerlink" title="如果库存数量没有商品订单多怎么办?"></a>如果库存数量没有商品订单多怎么办?</h3><ul><li>操作目标:订单表</li><li>操作时机:下单前</li><li>操作事件:插入时间</li></ul><pre>-- 判断库存delimiter $$create trigger b_i_o_t before insert on my_orders for each rowbegin    --取出库存数据进行判断    select inv from my_goods where id = new.goods_id into @inv;    --判断    if @inv < new.goods_num then        -- 中断操作:暴力解决，主动出错        insert into xxx values('xxx');    end if;end$$delimiter ;</pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;触发器&quot;&gt;&lt;a href=&quot;#触发器&quot; class=&quot;headerlink&quot; title=&quot;触发器&quot;&gt;&lt;/a&gt;触发器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基本概念&lt;ul&gt;
&lt;li&gt;触发器是一种特殊的存储过程，它不同于之前的存储过程。触发器主要是通过事件进行触发而被执行的，而
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://anntly.github.io/tags/Mysql/"/>
    
      <category term="数据库" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>基于Mysql的数据库复习笔记--存储过程</title>
    <link href="https://anntly.github.io/2018/07/19/%E5%9F%BA%E4%BA%8EMysql%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    <id>https://anntly.github.io/2018/07/19/基于Mysql的数据库复习笔记-存储过程/</id>
    <published>2018-07-18T16:42:04.000Z</published>
    <updated>2018-07-18T16:42:23.131Z</updated>
    
    <content type="html"><![CDATA[<h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><ul><li>存储过程简称为过程</li><li>存储过程(Stored procedure)是在大型数据库系统中，一组为了完成特定功能的SQL语句集，存储在数据库中，经过第一次编译后再次调用不需要再次编译(效率比较高),用户通过指定存储过程的名字并给出参数(如果该存储过程带有参数)来执行它。存储过程是数据库的一个重要对象。(针对SQL编程而言)</li><li>与函数的区别<ul><li>相同点:</li></ul><ol><li>存储过程与函数的目的都是为了可以重复执行操作数据库的sql语句的集合</li><li>存储过程函数都是一次编译，后续执行</li></ol><ul><li>不同点</li></ul><ol><li>标识符不同.函数的标识符为Function，过程为Procedure</li><li>函数中有返回值，且必须返回，而过程没有返回值</li><li>过程无返回值类型，不能呢个将结果直接赋值给变量；函数有返回值类型，调用时，除在select中，必须将返回值赋给变量</li><li>函数可以在select语句中使用，而过程不能</li></ol></li></ul><h3 id="存储过程操作"><a href="#存储过程操作" class="headerlink" title="存储过程操作"></a>存储过程操作</h3><ul><li>创建存储过程<ul><li>基本语法<ul><li>Create procedure 过程名字([参数名字])<br>Begin<br>过程体<br>End<br>结束符</li><li>如果过程体重只有一条指令，可以省略begin，end</li></ul></li></ul></li></ul><pre>-- 创建过程create procedure my_pro1()select * from my_student;</pre><ul><li>过程基本上也可以完成函数对应的所有功能</li></ul><pre>-- 修改语句结束符delimiter $$create procedure my_pro2()begin    -- 求1到100之间的和    declare i int default 1;    -- declare sum int default 0;  -- 局部变量    set @sum = 0;                  -- 会话变量    -- 开始循环获取结果    while i <= 100="" do="" --="" 求和="" set="" @sum="@sum" +="" i;="" i="i" 1;="" end="" while;="" 显示结果="" select="" @sum;="" $$="" delimiter="" ;="" <="" pre=""><ul><li>查看过程<ul><li>查看过程与查看函数完全一样,除了关键字</li><li>查看全部存储过程:show procedure status [like ‘’pattern];</li><li>参看过程创建语句:show create procedure 过程名字;</li></ul></li><li>调用过程<ul><li>过程没有返回值,select不可能调用</li><li>调用过程有专用语法:call 过程名([实参列表]);</li></ul></li><li>删除过程<ul><li>基本语法:drop procedure 过程名字;</li></ul></li></ul><h3 id="存储过程中的形参类型"><a href="#存储过程中的形参类型" class="headerlink" title="存储过程中的形参类型"></a>存储过程中的形参类型</h3><ul><li><p>存储过程也允许提供参数(形参和实参):存储过程的参数和函数一样，需要制定其类型，但是存储过程还有额外的要求，自己的参数分类</p><ul><li>In</li><li>表示参数从外部传入到里面（过程内部）使用，可以是直接数据也可以是保存数据变量</li><li>Out</li><li>表示参数是从过程里面包数据保存到变量中，交给外部使用，传入的必须是变量;如果说传入的out变量本身在外部有值，那么在进入过程之后，第一件事就是被清空</li><li>Inout</li><li>数据可以冲外部传入到过程内部使用，同时内部操作之后，又会将数据返回到外部</li></ul></li><li><p>参数使用级别语法(形参)</p></li><li>过程类型 变量名 数据类型;  //in int_1 int;</li><li>out类型的数据会被清空</li><li>走到end的时候，判断变量是否是out或者inout，如果是，将代替out和inout变量的对应形参的值重新赋值外部变量，会将外部变量本身的值给覆盖</li></ul></=></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;存储过程&quot;&gt;&lt;a href=&quot;#存储过程&quot; class=&quot;headerlink&quot; title=&quot;存储过程&quot;&gt;&lt;/a&gt;存储过程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;存储过程简称为过程&lt;/li&gt;
&lt;li&gt;存储过程(Stored procedure)是在大型数据库系统中，一组为了
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://anntly.github.io/tags/Mysql/"/>
    
      <category term="数据库" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>基于Mysql的数据库复习笔记--变量作用域</title>
    <link href="https://anntly.github.io/2018/07/19/%E5%9F%BA%E4%BA%8EMysql%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>https://anntly.github.io/2018/07/19/基于Mysql的数据库复习笔记-变量作用域/</id>
    <published>2018-07-18T16:41:25.000Z</published>
    <updated>2018-07-18T16:41:40.882Z</updated>
    
    <content type="html"><![CDATA[<h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><ul><li>变量能够使用的区域范围</li><li>局部作用域<ul><li>使用declare关键字声明(在结构体内:函数/存储过程/触发器)而且只能在结构体内部使用</li></ul><ol><li>decalre关键字声明的变量没有任何符号修饰，就是普通字符串，如果在外部访问该变量，系统会自动认为是字段</li></ol></li><li>会话作用域<ul><li>用户定义的，使用@符号定义的变量,使用set关键字</li><li>会话作用域:当前用户当次连接有效，只要在本连接中，任何地方都可以使用(可以再结构内部,也可以跨库)</li></ul></li><li>全局作用域<ul><li>所有的客户端所有的连接都有效:需要使用全局符号来定义</li><li>set global 变量名 = 值;</li><li>set @@global.变量名 = 值;</li><li>通常在SQL编程的时候不会使用自定义变量来控制全局。一般都是定义会话变量或者在结构中使用局部变量来解决问题</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;变量作用域&quot;&gt;&lt;a href=&quot;#变量作用域&quot; class=&quot;headerlink&quot; title=&quot;变量作用域&quot;&gt;&lt;/a&gt;变量作用域&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;变量能够使用的区域范围&lt;/li&gt;
&lt;li&gt;局部作用域&lt;ul&gt;
&lt;li&gt;使用declare关键字声明(在结
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://anntly.github.io/tags/Mysql/"/>
    
      <category term="数据库" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>基于Mysql的数据库复习笔记--流程结构案例</title>
    <link href="https://anntly.github.io/2018/07/19/%E5%9F%BA%E4%BA%8EMysql%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84%E6%A1%88%E4%BE%8B/"/>
    <id>https://anntly.github.io/2018/07/19/基于Mysql的数据库复习笔记-流程结构案例/</id>
    <published>2018-07-18T16:40:39.000Z</published>
    <updated>2018-07-18T16:41:05.064Z</updated>
    
    <content type="html"><![CDATA[<h3 id="流程结构案例"><a href="#流程结构案例" class="headerlink" title="流程结构案例"></a>流程结构案例</h3><ul><li>需求:从1开始，直到用户传入的对应的值为止，自动求和，凡是5的倍数都不要</li><li>设计<ol><li>创建函数</li><li>形参:确定要累加到什么位置</li><li>需要定义一个变量来保存对应的结果<ul><li>set @变量名;</li><li>使用局部变量来操作，此结果是在函数内部使用</li><li>Declare 变量名 类型 [= 默认值]</li></ul></li><li>内部需要一个循环来实现迭代累加</li><li>循环内部需要进行条件控制:5的倍数</li><li>函数必须有返回值</li></ol></li><li>调用函数:select 函数名(实参);</li><li>具体代码</li></ul><pre>-- 自动求和函数-- 修改语句结束符delimiter $$-- 创建函数create function my_sum(end_value int) returns intbegin    -- 声明变量(局部变量):如果使用declare声明变量:必须在其他函数体语句之前    declare res int default 0;    declare i int default 1;    -- 循环处理    mywhile:while i <= 5="0" end_value="" do="" --="" 判断条件是否合理="" if="" i="" %="" then="" 5的倍数不要="" set="" iterate="" mywhile;="" end="" if;="" 修改变量:累加结果="" res="res" +="" i;="" mysql没有++="" while="" --返回值="" return="" res;="" 结束="" $$="" 修改语句结束符="" delimiter="" ;="" 调用函数="" select="" my_sum(100),my_sum(-100);="" <="" pre=""></=></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;流程结构案例&quot;&gt;&lt;a href=&quot;#流程结构案例&quot; class=&quot;headerlink&quot; title=&quot;流程结构案例&quot;&gt;&lt;/a&gt;流程结构案例&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;需求:从1开始，直到用户传入的对应的值为止，自动求和，凡是5的倍数都不要&lt;/li&gt;
&lt;li&gt;设计
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://anntly.github.io/tags/Mysql/"/>
    
      <category term="数据库" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>基于Mysql的数据库复习笔记--函数</title>
    <link href="https://anntly.github.io/2018/07/19/%E5%9F%BA%E4%BA%8EMysql%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%87%BD%E6%95%B0/"/>
    <id>https://anntly.github.io/2018/07/19/基于Mysql的数据库复习笔记-函数/</id>
    <published>2018-07-18T16:39:30.000Z</published>
    <updated>2018-07-18T16:40:05.048Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>在mysq中，函数分为两类:系统函数(内置函数)和自定义函数</li><li>不管是内置函数还是用户自定义函数，都是使用 <font color="#F08080">select 函数名(参数列表);</font></li></ul><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><ul><li>char length():判断字符串的字符数</li><li>Length():判断字符串的字节数(与字符集)</li><li>Concat():连接字符串</li><li>Instr():判断字符在目标字符串是否存在，存在返回其位置，不存在返回0</li><li>Lcase():全部小写</li><li>Left():从左侧开始截取字符串到指定位置</li><li>Ltrim():消除左边对应的空格</li><li>Mid():从中间指定位置开始截取，如果不指定截取长度，直接到最后</li></ul><h4 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h4><ul><li>Now():返回当前时间,日期时间</li><li>Curdate():返回当前日期</li><li>Curtime():返回当前时间</li><li>Datediff():判断两个日期之间的天数差距，参数日期必须使用字符串格式(用引号包裹)</li><li>Date_add(日期,interval 时间数字 type):那些时间的增加<ul><li>type:day/hour/minute/second</li></ul></li><li>Unix_timestamp():获取时间戳</li><li>from_unixtime():将指定时间戳转换为日期格式</li></ul><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><ul><li>abs():绝对值</li><li>ceiling():向上取整</li><li>floor():向下取整</li><li>pow(a,b):求指数，a的b次方</li><li>rand():获取一个随机数(0-1)之间</li><li>round():四舍五入函数</li></ul><h4 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h4><ul><li>md5():对数据进行md5加密</li><li>version():获取版本号</li><li>database():显示当前所在数据库</li><li>UUID():生成一个唯一标志符(自增长),自增长是单表唯一，uuid是整库(数据唯一空间唯一)</li></ul><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><ul><li>用户自己定义的函数</li><li>函数:实现某种功能的语句块(由多条语句组成)</li></ul><ol><li>函数内部的每条指令都是一个独立的个题:需要符合语句定义规范:需要语句结束符分号;</li><li>函数是一个整体，而且函数是在调用的时候才会被执行，那么当设计函数的时候，一位置整体不能被中断</li><li>Mysql一旦见到语句结束符分号，就会自动开始执行</li></ol><ul><li>解决方案:在定义函数之间，尝试修改临时的语句结束符</li><li>基本语法:delimiter<ul><li>delimiter 新符号[可以使用系统费内置符号即可如$$</li><li>中间为正常SQL指令:使用分号结束(系统不会执行:不认识分号)</li><li>使用新符号借书</li><li>修改回语句结束符:delimiter;</li></ul></li><li>创建函数<ul><li>自定义函数包含的要素:function 关键字，函数名，参数(形参和实参[可选]),确认函数返回值类型,函数体，返回值</li><li>函数定义的基本语法:<ul><li>修改语句结束符<br><br>create function 函数名(形参) returns 返回值类型<br>Begin<br>//函数体<br>Return 返回值数据; //数据必须与结构中定义的返回值类型一致<br>End<br>语句结束符<br>修改语句结束符(改回来)</li><li>并不是所有函数都需要begin和end:如果函数体本身只有一条指令(return),那么可以省略begin和end</li></ul></li><li>形参:在mysql中需要为函数的形参指定数据类型(形参本身可以有多个)<ul><li>基本语法:变量名 字段类型</li></ul></li></ul></li><li>查看函数<ol><li>可以通过查看function状态，查看所有函数<ul><li>show function status [like ‘pattern’];</li></ul></li><li>查看函数的创建语句:<ul><li>show create function 函数名字;</li></ul></li></ol></li><li>调用函数<ul><li>自定义函数的调用与内置函数的调用是一样的:select 函数名(实参列表);</li></ul></li><li>删除函数<ul><li>删除函数:drop function 函数名;</li></ul></li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>自定义函数是属于用户级别的:只有当前客户端对应的数据库可以使用</li><li>可以再不同的数据库下看到对应的函数，但是不可以调用</li><li>自定义函数:通常是为了将多行代码集合到一起解决一个重复性的问题</li><li>函数因为必须返回规范返回值:那么在函数内部不能使用select指令，select一旦执行就会得到一个结果(result set):select 字段 into@变量;(唯一可用)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在mysq中，函数分为两类:系统函数(内置函数)和自定义函数&lt;/li&gt;
&lt;li&gt;不管是内置函数还是用户自定义函数，都是使用 &lt;f
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://anntly.github.io/tags/Mysql/"/>
    
      <category term="数据库" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>基于Mysql的数据库复习笔记--流程结构</title>
    <link href="https://anntly.github.io/2018/07/19/%E5%9F%BA%E4%BA%8EMysql%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/"/>
    <id>https://anntly.github.io/2018/07/19/基于Mysql的数据库复习笔记-流程结构/</id>
    <published>2018-07-18T16:36:43.000Z</published>
    <updated>2018-07-18T16:37:54.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="流程结构"><a href="#流程结构" class="headerlink" title="流程结构"></a>流程结构</h3><ul><li>流程结构:代码的执行顺序</li></ul><h4 id="if分支"><a href="#if分支" class="headerlink" title="if分支"></a>if分支</h4><ul><li>基本语法<ol><li>用在select查询中，当做一种条件爱你进行判断<ul><li>基本语法:if(条件,为真结果,为假结果)</li><li>select *,if(stu_age &gt; 20,’符合’,’不符合’) as judge from my_student[ where stu_age &gt; 20];</li></ul></li><li>用在复杂的语句块中(函数/存储过程/触发器)<ul><li>基本语法:<br>if 条件表达式 then<br><br>满足条件要执行的语句;<br><br>end if;</li></ul></li></ol></li><li>符合语法<ul><li>代码的判断存在两面性，两面都有对应的代码执行</li><li>基本语法:<br>if 条件表达式 then<br>满足条件执行的语句;<br>else <br> 不满足条件要执行的语句  // 如果还有其他分支，还可以继续使用if else<br> end if;</li></ul></li></ul><h3 id="While循环"><a href="#While循环" class="headerlink" title="While循环"></a>While循环</h3><ul><li>循环体都是需要在大型代码块中使用</li><li>基本语法<ul><li>while 条件 do<br> 要循环执行的代码;<br> end while;</li></ul></li><li>结构标志符<ul><li>为某些特定的结构进行命名，为的是在某些地方使用名字</li><li>基本语法:<br>标识名字:while 条件 do<br>循环体<br>end while [标识名字];</li><li>标识符的存在主要是为了循环体中使用循环控制,mysql中是没有continue和break,有自己的关键字替代<ul><li>iterate迭代:就是一下代码不执行，重新开始循环(continue)</li><li>leave:离开,整个循环终止(break)</li><li>基本语法:<br>标识名字:while 条件 do<br>if 判断条件 then<br>循环控制;<br>iterate/leave 标识名字;<br>end if;<br>循环体<br>end while [标识名字];</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;流程结构&quot;&gt;&lt;a href=&quot;#流程结构&quot; class=&quot;headerlink&quot; title=&quot;流程结构&quot;&gt;&lt;/a&gt;流程结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;流程结构:代码的执行顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;if分支&quot;&gt;&lt;a href=&quot;#if分支&quot; cl
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://anntly.github.io/tags/Mysql/"/>
    
      <category term="数据库" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>基于Mysql的数据库复习笔记--变量</title>
    <link href="https://anntly.github.io/2018/07/19/%E5%9F%BA%E4%BA%8EMysql%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8F%98%E9%87%8F/"/>
    <id>https://anntly.github.io/2018/07/19/基于Mysql的数据库复习笔记-变量/</id>
    <published>2018-07-18T16:34:04.000Z</published>
    <updated>2018-07-18T16:36:15.195Z</updated>
    
    <content type="html"><![CDATA[<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>Mysql本质是一种编程语言，需要很多变量来保存数据。Mysql中很多的属性控制都是通过mysql中固有的变量实现的</li><li>系统变量<ul><li>系统内部定义的变量，系统变量针对所有用户(Mysql客户端)有效</li><li>查看系统所有变量:<font color="#F08080">show variables [like ‘pattern’];</font></li><li>Mysql允许用户使用select查询变量的数据值(系统变量):<font color="#F08080">select @@变量名;</font></li><li>修改系统变量:分为两种修改方式<ol><li>局部修改(会话级别):只针对当前自己客户端当次连接有效<ul><li>基本语法:<font color="#F08080">set 变量名 = 新值;</font></li></ul></li><li>全局修改:针对所有客户端，”所有时刻”都有效<ul><li>基本语法:<font color="#F08080">set global 变量名 = 值;或者set @@global.变量名 = 值;</font></li><li>全局修改之后:所有连接的客户端并没有发现改变?<font color="#F08080">全局修改只针对新客户端生效(正在连着的无效)</font></li><li>注意:如果想要本次连接对应的变量修改有效，那么不能使用全局变量，只能使用会话级别修改(set 变量名 = 值)</li></ul></li></ol></li></ul></li><li>会话变量<ul><li>也称之为用户变量，会话变量跟mysql客户端是绑定的，设置的变量，<font color="#F08080">只对当前用户使用的客户端生效</font></li><li>定义用户变量:<font color="#F08080">set @变量名 = 值;</font></li><li>在mysql中因为没有比较符号==，所以是用=代替比较符号;有时候在赋值的时候，会报错;mysql为了避免系统分不清是赋值还是比较:特定增加一个变量的复制符号: :=</li><li><font color="#F08080">Set @变量名 := 值;</font></li><li>mysql是专门存储数据的，允许数据从表中取出存储到变量中，要求查询得到的数据必须只能是一行数据(一个变量对应一个字段值):Mysql没有数组<ol><li>赋值且查看赋值过程:select @变量1 = 字段1,@变量2 = 字段2 from 数据表 where条件<ul><li>错误语法:因为使用了 =，系统会当做比较符号，必须使用 :=</li></ul></li><li>只赋值不看过程:select 字段1,字段2…from 数据源 where 条件 into @变量1,@变量2…</li></ol></li><li>查看变量:select @变量名;</li></ul></li><li>局部变量<ul><li>作用范围在begin到end语句块之间，在该语句块里设置的变量，declare语句专门用于定义局部变量</li></ul><ol><li>局部变量是使用declare关键字声明</li><li>局部变量declare语句出现的位置一定是在begin和end之间(begin end是在大型语句块中使用:函数/存储过程/触发器)</li><li>声明语法:delcare 变量名 数据类型[属性];</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Mysql本质是一种编程语言，需要很多变量来保存数据。Mysql中很多的属性控制都是通过mysql中固有的变量实现的&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://anntly.github.io/tags/Mysql/"/>
    
      <category term="数据库" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>基于Mysql的数据库复习笔记--事务安全</title>
    <link href="https://anntly.github.io/2018/07/19/%E5%9F%BA%E4%BA%8EMysql%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8B%E5%8A%A1%E5%AE%89%E5%85%A8/"/>
    <id>https://anntly.github.io/2018/07/19/基于Mysql的数据库复习笔记-事务安全/</id>
    <published>2018-07-18T16:32:10.000Z</published>
    <updated>2018-07-18T16:32:53.836Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事务安全"><a href="#事务安全" class="headerlink" title="事务安全"></a>事务安全</h3><ul><li>事务概念</li><li><p>事务基本原理:mysql允许将事务统一进行管理(存储引擎Innodb)，将用户所作的操作保存起来，不直接放到数据表（更新），等用户确认结果之后在进行操作</p></li><li><p>自动事务</p><ul><li>autocommit:当客户端发送一条SQL指令(写操作:增删改)给服务器的时候，服务器在执行之后，不用等待用户反馈结果，会自动将结果同步到数据表。</li><li>系统做了额外的步骤来帮助用户操作，系统是通过变量来控制的。</li><li>Show variables like ‘autocommit%’;</li><li>关闭自动事务:关闭之后系统就不再帮助用户提交结果了<ul><li>Set autocommit = Off;</li></ul></li><li>一旦自动事务关闭:需要用户提供同步的命令<ul><li>Commit:提交（同步到数据表:事务也会被清空）</li><li>Rollback:回滚(清空之前的操作)</li></ul></li></ul></li><li>手动事务<ul><li>不管是开始还是过程还是结束都需要用户(程序员)，手动的发送事务操作指令来实现。</li><li>命令<ul><li>start transaction; //从这条语句开始，后面的所有语句都不会写入到数据表(保存在事务日志中)</li><li>事务处理:多个写指令构成</li><li>事务提交:commit;/rollback;到这个时候，所有的事务才算结束</li></ul></li><li>开启事务<ul><li>start transaction;</li></ul></li><li>执行事务<ul><li>将多个连续的但是是一个整体的SQL指令逐一执行</li></ul></li><li>提交事务<ul><li>确认提交:commit，数据写到数据表（清空事务日志）</li><li>回滚操作:rollback，所有数据无效并清空</li></ul></li><li>回滚点<ul><li>回滚点:savepoint，当有一系列实务操作时，而其中的步骤如果成功了，没有必要重新来过，可以在某个成功点，设置一个记号(回滚点)，如果之后失败，可以回到这个记号位置</li><li>增加回滚点:<font color="#F08080">savepoint 回滚点名字;</font> //字母数字和下划线构成</li><li>回到回滚点:<font color="#F08080">rollback to 回滚点名字;</font> //那个记号(回滚点)之后的所有操作没有了</li><li>注意:在一个事务处理中，如果有很多个步骤，那么可以设置多个回滚点。但是如果回到了前面的回滚点，后面的回滚点就失效。</li></ul></li><li>特性<ol><li>原子性(atomicity):一个事务是一个不可分割的工作单位，事务包括的诸操作要么都做，要么都不做<ul><li>事务从 start transa 起到提交事务(commit 或者 rollback),要么所有的操作都成功，要么所有的操作都失败</li></ul></li><li>一致性(consistency):事务必须是使数据库从一个一致性状态编导另一个一致性状态。一致性与原子性是密切相关的。<ul><li>数据表中的数据修改，要么是所有操作一次性修改，要么是根本不动</li></ul></li><li>隔离性(isolation):一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能相互干扰<ul><li>如果一个客户端在使用事务操作一个数据(可能是一行/整表)的时候，另外一个客户端不能对该数据进行操作</li><li>什么时候行被隔离?什么时候是表被隔离?</li><li>如果条件中使用了索引(主键)，那么系统是根据主键直接找到某条记录，这个时候与其他记录无关，那么只隔离一条记录;反之，如果系统是通过全表检索（每一条记录都去检查:没有索引），被检索的所有数据都会被锁定(整表)</li></ul></li><li>持久性(durability):也称之为永久性(permanence)指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响</li></ol></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;事务安全&quot;&gt;&lt;a href=&quot;#事务安全&quot; class=&quot;headerlink&quot; title=&quot;事务安全&quot;&gt;&lt;/a&gt;事务安全&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;事务概念&lt;/li&gt;
&lt;li&gt;&lt;p&gt;事务基本原理:mysql允许将事务统一进行管理(存储引擎Innodb)，将用户
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://anntly.github.io/tags/Mysql/"/>
    
      <category term="数据库" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>基于Mysql的数据库复习笔记--视图基本操作</title>
    <link href="https://anntly.github.io/2018/07/19/%E5%9F%BA%E4%BA%8EMysql%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%A7%86%E5%9B%BE%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://anntly.github.io/2018/07/19/基于Mysql的数据库复习笔记-视图基本操作/</id>
    <published>2018-07-18T16:29:42.000Z</published>
    <updated>2018-07-18T16:31:02.235Z</updated>
    
    <content type="html"><![CDATA[<h3 id="视图基本操作"><a href="#视图基本操作" class="headerlink" title="视图基本操作"></a>视图基本操作</h3><ul><li>创建视图<ul><li>视图的本质是SQL指令(select语句)</li><li>基本语法:<font color="#F08080">create view 视图名字 as select 指令;</font> //可以是单表数据，也可以是连接查询，联合查询或者子查询</li><li>查看视图结构:视图本身是虚拟表，所以关于表的一些操作都适用于视图</li></ul></li><li>使用视图<ul><li>视图是一张虚拟表:可以直接把视图当做”表”操作，但是视图本身没有数据，是临时执行select语句得到对应的结果。视图主要用户查询操作</li><li>基本语法：<font color="#F08080">select 字段列表 from 视图名称 [子句];</font></li></ul></li><li>修改视图<ul><li>修改视图:本质是修改视图对应的查询语句</li><li>基本语法:<font color="#F08080">alter view 视图名字 as 新select指令;</font></li></ul></li><li>删除视图<ul><li>基本语法:drop view 视图名字;</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;视图基本操作&quot;&gt;&lt;a href=&quot;#视图基本操作&quot; class=&quot;headerlink&quot; title=&quot;视图基本操作&quot;&gt;&lt;/a&gt;视图基本操作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;创建视图&lt;ul&gt;
&lt;li&gt;视图的本质是SQL指令(select语句)&lt;/li&gt;
&lt;li&gt;基本语法
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://anntly.github.io/tags/Mysql/"/>
    
      <category term="数据库" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>基于Mysql的数据库复习笔记--外键</title>
    <link href="https://anntly.github.io/2018/07/19/%E5%9F%BA%E4%BA%8EMysql%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%A4%96%E9%94%AE/"/>
    <id>https://anntly.github.io/2018/07/19/基于Mysql的数据库复习笔记-外键/</id>
    <published>2018-07-18T16:27:36.000Z</published>
    <updated>2018-07-18T16:28:49.356Z</updated>
    
    <content type="html"><![CDATA[<h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><ul><li>概念:如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另外一个关系的外键.由此可见，外键表示了两个关系之间的相关联系。以另一个关系的外键作主关键字的表被称为主表，具有此外键的表被称为主表的从表。外键又称为外关键字。</li><li>外键:foreign key，一张表（A）中有一个字段，保存的值指向另外一张表（B）的主键。B为主表，A为从表</li><li>外键的操作<ul><li>增加外键<ol><li>在创建表的时候增加外键（类似主键）<ul><li>基本语法:在在字段后增加一条语句:<font color="#F08080">[constraint ‘外键名’] foreign key (外键字段) references 主表(主键);</font></li></ul></li><li>在创建表后增加外键<ul><li><font color="#F08080">Alter table 从表 add [[constraint ‘外键名’] foreign key(外键字段) references 主表(主键);</font></li></ul></li></ol></li><li>多索引：MUL，外键本身是一个索引，外键要求外键字段本身也是一种普通索引</li><li>外键名字可以指定</li><li>修改&amp;删除外键<ul><li>外键不允许修改，只能先删除后增加</li><li>基本语法；<font color="#F08080">alter table 从表 drop foreign key 外键名字;</font></li><li>外键不能删除产生的普通索引，想要删除:<font color="#F08080">alter table 表名 drop 索引名字;</font></li></ul></li><li>外键基本要求<ol><li>外键字段需要保证与关联的主表的主键字段类型完全一致;</li><li>基本属性也要相同</li><li>如果是在表后增加外键，对数据还有一定的要求(从表与主表的关联关系)</li><li>外键只能使用innodb存储引擎</li></ol></li></ul></li><li>外键约束<ul><li>通过建立外键关系之后，对主表和从表都会有一定的数据约束效率</li><li>约束的基本概念:<ul><li>当一个外键产生时:外键所在的从表会受制于主表数据的存在而导致数据不能进行某些不符合规范的操作（不能插入主表不存在的数据）</li><li>如果一张表被其他表外键引入，那么该表的数据操作就不能随意:必须保证从表数据的有效性（不能随便删除一个被从表引入的记录）</li></ul></li></ul></li><li>外键约束的概念<ul><li>对外键约束进行选择性的操作</li><li>基本语法:add foreign(外键字段) references 主表(主键) on 约束模式;</li><li>约束模式<ol><li>district:严格模式,默认，不允许操作</li><li>cascade:级联模式，一起操作，主表变化，从表数据跟着变化</li><li>set null:置空模式，主表变化（删除），从表对应记录设置为空，前提是从表中对应的外键字段允许为空</li></ol></li><li>外键约束主要约束的对象是主表操作:从表就是不能插入主表不存在的数据</li><li>通常在进行约束的时候，需要制定操作:update和delete</li><li>通常的约束模式:<font color="#F08080">on update cascade,on delete set null</font>,更新级联，删除置空</li><li>约束作用:保证数据完整性:主表与从表的数据要一致</li><li>正是因为外键又非常强大的数据约束作用，而且可能导致数据在后台变化的不可控。导致程序在进行设计开发逻辑的时候，没有办法去很好的把数据（业务），所以外键比较少使用</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;外键&quot;&gt;&lt;a href=&quot;#外键&quot; class=&quot;headerlink&quot; title=&quot;外键&quot;&gt;&lt;/a&gt;外键&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;概念:如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另外一个关系的外键.由此可见，外键表示了两个关系之间的相关联
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://anntly.github.io/tags/Mysql/"/>
    
      <category term="数据库" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>基于Mysql的数据库复习笔记--用户权限管理</title>
    <link href="https://anntly.github.io/2018/07/19/%E5%9F%BA%E4%BA%8EMysql%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <id>https://anntly.github.io/2018/07/19/基于Mysql的数据库复习笔记-用户权限管理/</id>
    <published>2018-07-18T16:24:14.000Z</published>
    <updated>2018-07-18T16:25:12.010Z</updated>
    
    <content type="html"><![CDATA[<h3 id="用户权限管理"><a href="#用户权限管理" class="headerlink" title="用户权限管理"></a>用户权限管理</h3><ul><li>用户权限管理:在不同的项目中给不同的角色(开发者)不同的操作权限，为了保证数据库数据安全</li><li><p>通常，一个用户的密码不会长期不变，所以需要经常性的变更数据库密码来确保用户本身安全(mysql客户端用户)</p><h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4></li><li><p>mysql需要客户端进行连接认证才能进行服务器操作:需要用户信息。mysql中所有的用户信息都是保存在mysql数据库下的user表中。</p></li><li>默认的，在安装mysql的时候，如果不选择创建匿名用户，那么意味着所有的用户只有一个:root超级用户</li><li>在mysql中，对应的用户管理中，是由对应的Host和User共同组成主键来区分用户。<ul><li>User:代表用户的用户名</li><li>Host:代表本质是允许访问的客户端(IP或者主机地址)。如果host使用%代表所有的用户和客户端都可以访问</li></ul></li><li>创建用户<ol><li>直接使用root用户在mysql.user表中插入记录(不推荐)</li><li>专门创建用户的SQL指令<ul><li>==create user 用户 identified by ‘明文密码’;==</li><li>用户:用户名@主机地址</li><li>主机地址:”/“‘%’</li><li>==create user ‘user1 ‘@’%’ identified by ‘123456’;==</li></ul></li></ol></li><li>删除用户</li><li>mysql中user表是带着hots本身的(具有唯一性)</li><li><p>基本语法:==drop 用户名@host;==</p></li><li><p>修改用户密码</p><ol><li>使用专门的修改密码的指令<ul><li>基本语法:<font color="#F08080">set password for 用户 = password(‘新密码’);</font></li></ul></li><li>使用更新语句uodate来更新表<ul><li>update mysql.user set password = password(‘明文密码’) where user =”” and host=””;</li></ul></li></ol></li></ul><h4 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h4><ul><li>在mysql中将权限管理分为三类<ol><li>数据权限:增删改查(select/update/delete/insert)</li><li>结构权限:结构操作(create/drop)</li><li>管理权限:权限管理（create user/grant/revoke）：通常只给管理员如此权限</li></ol></li><li>授予权限<ul><li>基本语法:<font color="#F08080">grant 权限列表 on 数据库[/<em> ].表名[/</em>] to 用户;</font></li><li>权限列表:使用逗号分隔，但是可以使用all privileges代表全部权限</li><li>数据库.表名:可以是单表(数据库.表名),可以是某个具体的数据库(数据库.<em>),也可以是整库(</em>.*)</li></ul></li><li>取消权限:revoke<ul><li>权限回收:将权限从用户手中收回</li><li>基本语法:<font color="#F08080">revoke 权限列表[all privileges] on 数据库[/<em> ].表[/</em>] from 用户;</font></li></ul></li><li>权限刷新:flush<ul><li>Flush：刷新，将当前对用户的权限操作，进行一个刷新，将操作的具体内容同步到对应表中</li><li>基本语法:flush privileges;</li></ul></li><li>密码丢失找回方案<ul><li>如果忘记root用户密码,需要去找回或者重置root用户密码<ol><li>停止服务（net stop mysql）</li><li>重新启动服务:mysqld.exe–skip-grant-tables; //启动服务器但是跳过权限</li><li>当前启动的服务器是没有权限概念:非常危险，任何客户端，不需要任何用户信息都可以直接登录，而且是root权限:新开客户端，用mysql.exe新开即可</li><li>修改root用户的密码:指定用户名@host</li><li>关闭服务器，重启服务</li></ol></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;用户权限管理&quot;&gt;&lt;a href=&quot;#用户权限管理&quot; class=&quot;headerlink&quot; title=&quot;用户权限管理&quot;&gt;&lt;/a&gt;用户权限管理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用户权限管理:在不同的项目中给不同的角色(开发者)不同的操作权限，为了保证数据库数据安全&lt;/li
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://anntly.github.io/tags/Mysql/"/>
    
      <category term="数据库" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>基于Mysql的数据库复习笔记--数据库备份与还原</title>
    <link href="https://anntly.github.io/2018/07/19/%E5%9F%BA%E4%BA%8EMysql%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%98%E5%8E%9F/"/>
    <id>https://anntly.github.io/2018/07/19/基于Mysql的数据库复习笔记-数据库备份与还原/</id>
    <published>2018-07-18T16:13:34.000Z</published>
    <updated>2018-07-18T16:21:10.554Z</updated>
    
    <content type="html"><![CDATA[<h3 id="整库数据备份与还原"><a href="#整库数据备份与还原" class="headerlink" title="整库数据备份与还原"></a>整库数据备份与还原</h3><ul><li>整库数据备份也叫SQL数据备份:备份结果是SQL指令</li><li>在Mysql中提供了一个专门用于备份的客户端:mysqldump.exe</li><li>SQL备份不只是备份数据，还备份对应的SQL指令(表结构):即使数据库遭到毁灭性的破坏（数据库被删）。那么利用SQl备份依然可以实现数据还原</li><li>SQL备份需要备份结构，因此产生的备份文件特别大，因此不适合特大型数据备份，也不适合数据变换频繁型数据库备份</li><li>SQL备份<ul><li>SQl备份用到的是专门的备份客户端，因此还没与数据库服务器进行连接</li><li>基本语法:<font color="#F08080">mysqldump/mysqldump.exe -hPup 数据库名字 [表1 [表2…]] &gt; 备份文件地址</font></li><li>备份可以有三种形式:<ol><li>整库备份（只需提供数据库名字）</li><li>单表备份:数据库后面跟一张表</li><li>多表备份：数据库后跟多张表</li></ol></li></ul></li><li>数据还原</li><li>Mysqldump备份的数据中没有关于数据库本身的操作，都是针对表级别的操作，当进行数据(SQL还原)，必须指定数据库<ol><li>利用mysql.exe客户端:没有登陆之前，可以直接用该客户端进行数据还原:<font color="#F08080">mysql.exe -hPup 数据库 &lt; 文件位置</font></li><li>在SQL指令，提供了一种导入SQL指令的方式:Source SQL文件位置; //必须需先进入指定的数据库</li><li>人为操作:打开备份文件复制所有SQL指令，然后到mysql.exe客户端执行（不推荐）</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;整库数据备份与还原&quot;&gt;&lt;a href=&quot;#整库数据备份与还原&quot; class=&quot;headerlink&quot; title=&quot;整库数据备份与还原&quot;&gt;&lt;/a&gt;整库数据备份与还原&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;整库数据备份也叫SQL数据备份:备份结果是SQL指令&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://anntly.github.io/tags/Mysql/"/>
    
      <category term="数据库" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>基于Mysql的数据库复习笔记--子查询</title>
    <link href="https://anntly.github.io/2018/07/18/%E5%9F%BA%E4%BA%8EMysql%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%AD%90%E6%9F%A5%E8%AF%A2/"/>
    <id>https://anntly.github.io/2018/07/18/基于Mysql的数据库复习笔记-子查询/</id>
    <published>2018-07-18T13:12:53.000Z</published>
    <updated>2018-07-18T13:14:54.410Z</updated>
    
    <content type="html"><![CDATA[<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ul><li>sub query:当一个查询是另外一个查询的条件时，称之为子查询</li></ul><h3 id="子查询分类"><a href="#子查询分类" class="headerlink" title="子查询分类"></a>子查询分类</h3><ul><li>按功能分<ul><li>标量子查询：子查询返回的结果是一个数据（一行一列）</li><li>列子查询：返回的接轨是一列（一列多行）</li><li>行子查询：返回的结果是一行（一行多列）</li><li>表子查询：返回的结果是多行多列（多行多列）</li><li>Exists子查询：返回的结果是1或者0（类似布尔操作）</li></ul></li><li>按位置分<ul><li>Where子查询：子查询出现的位置在where条件中</li><li>From子查询：子查询出现的位置在from数据源中（做数据源）</li></ul></li></ul><h3 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h3><ul><li>子查询得到的结果是一个数据（一行一列）</li><li>基本语法：<font color="#F08080">select * from 数据源 where 条件判断 =/&lt;&gt;(select 字段名 数据源 where 条件判断); //子查询得到的结果只有一个值</font></li></ul><h3 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h3><ul><li>子查询得到的结果是一列数据（一列多行）</li><li>基本语法：<font color="#F08080">主查询 where 条件 in （列子查询）</font></li></ul><h3 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h3><ul><li>子查询返回的是一行多列</li><li>行元素：字段元素是指一个字段对应的值，行元素对应的就是多个字段：多个字段合起来作为一个元素参与运算，把这种情况称之为行元素。</li><li>基本语法：<font color="#F08080">主查询 where 条件[(构造一个行元素)] = (行子查询);</font></li><li>例子:查找班级年龄最大且身高最高的学生</li><li>select * from my_student where (stu_age,stu_height) = (select max(stu_age),max(stu_height) from my_student);</li></ul><h3 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h3><ul><li>子查询返回的多行多列</li><li>基本语法：<font color="#F08080">Select 字段表 from (子查询)[where] [group by] [having] [limit];</font></li><li>例子：获取班上身高最高的学生（一个）</li><li>select <em> from (select </em> from my_student order by stu_height desc) ==as temp== group by class_id;</li></ul><h3 id="Exists子查询"><a href="#Exists子查询" class="headerlink" title="Exists子查询"></a>Exists子查询</h3><ul><li>查询返回的结果只有0或1,1代表成立，0代表不成立</li><li>基本语法：<font color="#F08080">where exists(查询语句);</font> //exists就是根据查询得到的结果进行判断:如果结果存在，返回1，否则0</li><li>where 1 永远为真</li></ul><h3 id="特定关键字"><a href="#特定关键字" class="headerlink" title="特定关键字"></a>特定关键字</h3><ul><li>In<ul><li>主查询 where 条件 in (列子查询);</li></ul></li><li>Any<ul><li>任意一个: = any(列子查询):条件在查询结果中有任意一个匹配即可</li><li>&lt;&gt;any(列子查询):条件在查询结果中不等于任意一个</li></ul></li><li>some<ul><li>与any完全一样:在国外，some与any正面含义一致，但是否定就大不相同，not any 与 not some</li></ul></li><li>All<ul><li>=all(列子查询):等于里面所有</li><li>&lt;&gt;all(列子查询):不等于所有</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;子查询&quot;&gt;&lt;a href=&quot;#子查询&quot; class=&quot;headerlink&quot; title=&quot;子查询&quot;&gt;&lt;/a&gt;子查询&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;sub query:当一个查询是另外一个查询的条件时，称之为子查询&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;子查询分类&quot;&gt;
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://anntly.github.io/tags/Mysql/"/>
    
      <category term="数据库" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>基于Mysql的数据库复习笔记--连接查询</title>
    <link href="https://anntly.github.io/2018/07/18/%E5%9F%BA%E4%BA%8EMysql%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/"/>
    <id>https://anntly.github.io/2018/07/18/基于Mysql的数据库复习笔记-连接查询/</id>
    <published>2018-07-18T13:05:34.000Z</published>
    <updated>2018-07-18T13:07:36.808Z</updated>
    
    <content type="html"><![CDATA[<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><ul><li>将多张表连到一起进行查询（会导致记录数行和字段数列发生改变）</li><li>意义：在关系型数据库设计过程中，实体（表）与实体之间存在很多联系。在关系型数据库表的设计过程中，遵循这关系来设计：一对一，一对多，多对多，通常在实际的操作中需要利用这层关系保证数据的完整性。</li><li>分类<ul><li>交叉连接<ul><li>将两张表的数据与另外一张表彼此交叉</li><li>原理：从第一张表依次取出每一条记录；取出每一条记录后，与另外一张表的全部记录挨个匹配；没有任何匹配条件，所有的结果都会进行保留；</li><li>记录数 = 第一张表记录数*第二张表记录数=第一张表字段数+第二张表字段数；</li><li>基本语法：<font color="#F08080">表1 cross join 表2；</font></li><li>应用：交叉连接产生的结果是笛卡尔积，没有实际应用。</li><li>本质：from 表1，表2；</li></ul></li><li>内连接<ul><li>inner join：从一张表中取出所有的记录，去另外一张表中匹配：利用匹配条件匹配，匹配成功则保留，失败就放弃</li><li>原理：从第一张那个表中取出一条记录，然后去另外一张表中进行匹配；利用匹配条件进行匹配；匹配到就保留，继续匹配；匹配失败就向下继续，如果权标匹配失败，结束</li><li>基本语法：<font color="#F08080">表1 [inner] join 表2 on 匹配条件；</font></li><li>如果内连接没有条件，结果就是交叉匹配的结果</li><li>因为表的设计通常容易产生同名字段，尤其是id，为了避免重名出现错误，通常使用<font color="#F08080">表名.字段名</font>来确保唯一性</li><li>通常，如果条件中使用到的表名过长，可以使用别名</li><li>内连接匹配的时候，必须保证匹配到才保存</li><li>内连接因为可以不强制使用匹配条件，因此可以在数据匹配之后，使用where条件来限制，效果与on一样（建议使用on）</li><li>应用：通常是在对数据有精确要求的地方使用：必须保证两张表中都能进行数据匹配</li></ul></li><li>外链接<ul><li>outer join：按照某一张表作为主表（表中所有记录在最后都会保留），根据条件去连接另外一张表，从而得到目标数据</li><li>左外连接（left join）<ul><li>左表是主表<ul><li>基本语法：<font color="#F08080">主表 left join 从表 on</font> 连接条件;</li><li>左连接对应的主表数据在左边</li></ul></li></ul></li><li>右外连接（right join）<ul><li>右表是主表</li><li>基本语法：<font color="#F08080">从表 right join 主表 on</font> 连接条件;</li><li>右连接对应的主表数据在右边</li></ul></li><li>原理：<ol><li>确定连接主表：左连接左边为主表，右连接右表尾主表</li><li>拿主表的每一条记录，去匹配另一张表（从表）的每一条记录</li><li>如果匹配条件：保留；不满足即不保留</li><li>如果主表记录在从表中一条都没有匹配成功，那么也要保留该记录；从表对应的字段值都为NULL</li></ol></li><li>特点<ol><li>外链接中主表数据记录一定会保存：连接之后不会出现记录数少于主表</li><li>左连接和右连接可以互相转换，但是数据对应的位置（表顺序）会发生改变</li></ol></li><li>应用<ul><li>常用的一种数据获取方式</li></ul></li></ul></li><li>自然连接</li></ul></li><li>Using关键字<ul><li>在连接查询时代替on关键字</li><li>原理<ul><li>在连接查询时，使用on的地方用using代替</li><li>使用using的前提是对应两张表的字段时同名</li><li>如果是用using关键字，同名字段最终结果中只会保留一个</li></ul></li><li>语法<ul><li><font color="#F08080">表1 [inner，left，right] join 表2 using(同名字段表);//连接字段</font></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;连接查询&quot;&gt;&lt;a href=&quot;#连接查询&quot; class=&quot;headerlink&quot; title=&quot;连接查询&quot;&gt;&lt;/a&gt;连接查询&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;将多张表连到一起进行查询（会导致记录数行和字段数列发生改变）&lt;/li&gt;
&lt;li&gt;意义：在关系型数据库设计过程中，
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://anntly.github.io/tags/Mysql/"/>
    
      <category term="数据库" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>基于Mysql的数据库复习笔记--联合查询</title>
    <link href="https://anntly.github.io/2018/07/18/%E5%9F%BA%E4%BA%8EMysql%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2/"/>
    <id>https://anntly.github.io/2018/07/18/基于Mysql的数据库复习笔记-联合查询/</id>
    <published>2018-07-18T12:59:38.000Z</published>
    <updated>2018-07-18T13:00:34.677Z</updated>
    
    <content type="html"><![CDATA[<ul><li>基本概念<ul><li>合并多个相似的结果集。等同于将一个表追加到另一个表，<font color="#F08080">从而实现将两个表的查询组合到一起</font>，使用谓词为UNION或UNION ALL。</li><li>联合查询：将多个查询的结果合并在一起（纵向合并）：字段数不变，多个查询的记录数合并。</li></ul></li><li>应用场景<ol><li>将同一张表中不同的结果（需要多条查询语句实现），合并到一起暂时数据<ul><li>男生身高升序排序，女生降序</li></ul></li><li>最常见：在数据量大的情况下，会对表进行分表操作，需要对每张表进行部分数据统计，使用联合查询来将数据存放在一起显示</li></ol></li><li>基本语法<ul><li>Select 语句 Union[union 选项] Select 语句;</li><li>Union选项：与select选项基本一样<ul><li>Distinct：去重，去掉完全重复的数据（默认）</li><li>All：保存所有的</li></ul></li><li>注意：union理论上子要保证字段数一样，不需要每次拿到的数据类型一致</li><li>永远只保留第一局select语句的位置</li></ul></li><li>Order by的使用<ul><li>在联合查询中要使用order by，对应的select语句必须使用括号括起来</li><li>order by 在联合查询中若要生效，必须配合使用limit：而limit后面必须跟对应的限制量（通常可以使用一个较大的值：大于对应表的记录数）</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;基本概念&lt;ul&gt;
&lt;li&gt;合并多个相似的结果集。等同于将一个表追加到另一个表，&lt;font color=&quot;#F08080&quot;&gt;从而实现将两个表的查询组合到一起&lt;/font&gt;，使用谓词为UNION或UNION ALL。&lt;/li&gt;
&lt;li&gt;联合查询：将多个查询的结果合并
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://anntly.github.io/tags/Mysql/"/>
    
      <category term="数据库" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>基于Mysql的数据库复习笔记--查询中的运算符</title>
    <link href="https://anntly.github.io/2018/07/18/%E5%9F%BA%E4%BA%8EMysql%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9F%A5%E8%AF%A2%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://anntly.github.io/2018/07/18/基于Mysql的数据库复习笔记-查询中的运算符/</id>
    <published>2018-07-18T12:47:43.000Z</published>
    <updated>2018-07-18T12:51:48.004Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><ul><li>+,-,*,/,%</li><li>通常不在条件中使用，而是用于结果运算</li><li>mysql中出发的运算结果使用浮点数表示</li><li>除法中除数如果为0，系统会给NULL</li><li>NULL进行任何算术运算结果都为NULL</li></ul><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul><li>>,&gt;=,&lt;,&lt;=,=&lt;&gt;（不等于）</li><li>用来在条件中进行限定结果</li><li>=：在mysql中没有对应的==比较符号，就是使用=来进行相等判断</li><li>&lt;=&gt;：相等比较</li><li>特殊应用：在字段结果中进行比较运算</li><li>在条件判断的时候，还有对应的比较运算符:计算区间<ul><li>between 条件1 and 条件2  （是闭区间查找）</li><li>between中条件1必须小于条件2</li></ul></li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li>and,or,not</li><li>and:逻辑与</li><li>or:逻辑或</li><li>not:逻辑非</li></ul><h3 id="In运算符"><a href="#In运算符" class="headerlink" title="In运算符"></a>In运算符</h3><ul><li>当结果不是一个值，而是一个结果集的时候</li></ul><h3 id="Is运算符"><a href="#Is运算符" class="headerlink" title="Is运算符"></a>Is运算符</h3><ul><li>专门用来判断字段是否为空的运算符</li><li>基本语法：is null/is not null</li></ul><h3 id="Like运算符"><a href="#Like运算符" class="headerlink" title="Like运算符"></a>Like运算符</h3><ul><li>用来进行模糊匹配</li><li>基本语法:like ‘匹配模式’;</li><li>匹配模式中，有两种占位符<ul><li>_:匹配单个字符</li><li>%: 匹配多个字符</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;算术运算符&quot;&gt;&lt;a href=&quot;#算术运算符&quot; class=&quot;headerlink&quot; title=&quot;算术运算符&quot;&gt;&lt;/a&gt;算术运算符&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;+,-,*,/,%&lt;/li&gt;
&lt;li&gt;通常不在条件中使用，而是用于结果运算&lt;/li&gt;
&lt;li&gt;mysql
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://anntly.github.io/tags/Mysql/"/>
    
      <category term="数据库" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>基于Mysql的数据库复习笔记--高级数据操作</title>
    <link href="https://anntly.github.io/2018/07/18/%E5%9F%BA%E4%BA%8EMysql%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/"/>
    <id>https://anntly.github.io/2018/07/18/基于Mysql的数据库复习笔记-高级数据操作/</id>
    <published>2018-07-18T12:39:51.000Z</published>
    <updated>2018-07-18T12:41:38.099Z</updated>
    
    <content type="html"><![CDATA[<h3 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h3><ul><li>多数据插入<ul><li>只要写一次insert指令，但是可以直接插入多条记录</li><li>基本语法:insert  into 表名 [(字段列表)] values (值列表),(值列表)…;</li><li>insert into my_table values(‘张三’),(‘李四’),(‘王五’)…;</li></ul></li><li>主键冲突<ul><li>在有的表中，使用的是业务主键（字段含有业务意义），但是往往在进行数据插入的时候，又不确定数据表中是否已经存在对应的主键。</li><li>解决方案<ol><li>主键冲突更新:类似插入数据语法，如果插入数据过程主键冲突，采用更新方法<ul><li>insert into 表名 [(字段列表)] values (值列表) on duplicate key  update 字段 = 新值</li></ul></li><li>主键冲突替换:当主键冲突之后，干掉原来的数据，重新插入数据<ul><li>Replace into[(字段列表)] values (值列表);</li></ul></li></ol></li></ul></li><li>蠕虫复制<ul><li>一分为二，成倍的增加；从已有的数据中和获取数据，并且将获取到的数据插入到数据表中。</li><li>基本语法:insert into 表名 [(字段列表)] select */字段列表 from 表；</li><li>注意<ol><li>蠕虫复制的通常是重复数据；可以测试表的压力，还可以通过大量数据来测试表的效率（索引）</li><li>需要注意主键冲突</li></ol></li></ul></li></ul><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><ul><li>在更新数据的时候，要注意:通常一定是跟随条件</li><li>如果没有条件，全表更新数据。但是可以使用 limit 来限制更新的数量<ul><li>update 表名 set 字段名 = 新值 [where 判断条件] limit 数量;</li></ul></li></ul><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><ul><li>删除数据的时候尽量不要全部删除，应该使用where进行判断</li><li>删除数据的时候可以使用limit来限制要删除的具体数量</li><li>Delete删除数据时无法重置auto_increment</li><li>Truncate 表名 重置表选项中的自增长</li></ul><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><ul><li>完整的查询指令:<font color="#F08080">Select select选项 字段列表 from 数据源</font> where 条件 group by 分组 order by 排序 limit 限制;</li><li>select 选项<ul><li>系统该如何对待查询得到的结果</li><li>ALL:默认的，表示保存所有的记录</li><li>Distinct:去重，去除重复的记录，只保留一条（所有字段都相同）</li><li>字段列表:有的时候需要从多张表获取数据，在获取数据的时候可能存在不同表中有同名的字段，需要将同名的字段命名成不同命的:别名 alias<ul><li>基本语法:字段名 [as] 别名</li></ul></li></ul></li><li>From数据源<ul><li>单表数据:From 表名;</li><li>多表数据:from 表1，表2…<ul><li>结果:笛卡尔积，两张表的数据记录数相乘，字段数拼接</li></ul></li><li>动态数据<ul><li>from后面跟的数据不是一个实体表，而是从表中查询出来的二维结果表（子查询）</li><li>基本语法:from (select 字段列表 from 表)as 别名;<font color="#F08080">(一定要有别名)</font></li></ul></li><li>Where子句<ul><li>从数据表中获取数据的时候，进行条件筛选</li></ul></li><li>Group by子句<ul><li>表示分组:根据指定字段进行分组，分组的目的是为了统计</li><li>分组统计<ul><li>基本语法:group by 字段名;</li><li>group by是为了分组后进行数据统计的，如果只是想看数据结果，group by没有什么含义:group by将数组按照指定字段进行分组后，<font color="#F08080">只会保留每组第一条记录</font></li><li>利用统计函数（聚合函数）:<ul><li>count():统计每组中的数量，如果统计的目标是字段，那么不统计NULL字段</li><li>avg():求平均值</li><li>sum():求和和</li><li>max():求最大值</li><li>min():求最小值</li><li>group_concat():为了将分组中指定的字段进行合并（拼接）</li></ul></li></ul></li><li>多分组<ul><li>将数据按照某个字段进行分组之后，对已经分组的数据进行再次分组</li><li>基本语法:group by 字段1，字段2;//先按照字段1进行排序，之后将结果按照字段2进行分组;</li></ul></li><li>分组排序<ul><li>默认按照分组字段进行排序，默认升序</li><li>基本语法:group by 字段 [asc|desc],字段 [asc|desc];</li></ul></li><li>回溯统计<ul><li>当分组进行多分组之后，往上统计的过程中，需要进行层层上报，将这种层层上报统计的过程称之为回溯统计；每一次分组向上统计的过程都会产生一次新的统计数据，而且当前数据对应的愤怒组字段为NULL;</li><li>基本语法:group by 字段 [asc|desc] with rollup;</li></ul></li></ul></li></ul></li><li>Having子句<ul><li>本质和where一样，是进行数据条件筛选</li><li>Having是在group by子句之后:可以对分组数据进行统计筛选，where不行</li><li>where不能使用聚合函数:聚合函数是用在group by where运行完毕</li><li>Having在group by 分组之后，可以使用聚合函数或者字段别名</li><li>having是在group by之后，group by是在where之后:where的时候表示将数据从磁盘拿到内存，where之之后的所有操作都是内存操作。</li></ul></li><li>Order by子句<ul><li>根据校对规则对数据进行排序</li><li>基本语法：order by 字段[asc|desc]; //asc升序，默认</li><li>多字段排序:order by 字段1 规则,字段2 规则…;</li></ul></li><li>Limit 子句<ul><li>主要是用来显示记录数量获取</li><li>记录数限制:<ul><li>纯粹的限制获取的数量</li><li>基本语法:limit 数量;</li><li>通常用在限定一条记录的时候</li></ul></li><li>分页<ul><li>利用limit来限制获取指定区间的数据</li><li>基本语法:limit offset,length; //offset 偏移量:从哪开始 length:具体获取多少条记录</li><li>Mysql中记录的数量从0开始</li><li>limit 0,2;表示获取前两条数据</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;新增数据&quot;&gt;&lt;a href=&quot;#新增数据&quot; class=&quot;headerlink&quot; title=&quot;新增数据&quot;&gt;&lt;/a&gt;新增数据&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;多数据插入&lt;ul&gt;
&lt;li&gt;只要写一次insert指令，但是可以直接插入多条记录&lt;/li&gt;
&lt;li&gt;基本语法:i
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://anntly.github.io/tags/Mysql/"/>
    
      <category term="数据库" scheme="https://anntly.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
